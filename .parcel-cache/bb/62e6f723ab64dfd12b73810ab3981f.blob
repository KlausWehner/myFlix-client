var helpers = require("../../../../../../../../../usr/local/lib/node_modules/parcel/node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MainView", ()=>MainView
);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _axios = require("axios");
var _axiosDefault = parcelHelpers.interopDefault(_axios);
var _loginView = require("../login-view/login-view");
var _registrationView = require("../registration-view/registration-view");
var _movieCard = require("../movie-card/movie-card");
var _movieView = require("../movie-view/movie-view");
var _row = require("react-bootstrap/Row");
var _rowDefault = parcelHelpers.interopDefault(_row);
var _col = require("react-bootstrap/Col");
var _colDefault = parcelHelpers.interopDefault(_col);
var _mainViewScss = require("./main-view.scss");
class MainView extends _reactDefault.default.Component {
    constructor(){
        super();
        this.state = {
            movies: [],
            selectedMovie: null,
            user: null
        };
    }
    componentDidMount() {
        let accessToken = localStorage.getItem('token');
        if (accessToken !== null) {
            this.setState({
                user: localStorage.getItem('user')
            });
            this.getMovies(accessToken);
        }
    }
    getMovies(token) {
        _axiosDefault.default.get('https://klaus-movie-api.herokuapp.com/movies', {
            headers: {
                Authorization: `Bearer ${token}`
            }
        }).then((response)=>{
            // Assign the result to the state
            this.setState({
                movies: response.data
            });
        }).catch(function(error) {
            console.log(error);
        });
    }
    setSelectedMovie(newSelectedMovie) {
        this.setState({
            selectedMovie: newSelectedMovie
        });
    }
    onLoggedIn(authData) {
        console.log(authData);
        this.setState({
            user: authData.user.Username
        });
        localStorage.setItem('token', authData.token);
        localStorage.setItem('user', authData.user.Username);
        this.getMovies(authData.token);
    }
    onLoggedOut() {
        localStorage.removeItem('token');
        localStorage.removeItem('user');
        this.setState({
            user: null
        });
    }
    render() {
        const { movies , selectedMovie  } = this.state;
        /*#__PURE__*/ _reactDefault.default.createElement("button", {
            onClick: ()=>{
                this.onLoggedOut();
            },
            __source: {
                fileName: "/Users/klauswehner2/Documents/WEB-Design-Dev/CareerFOUNDRY/myFlix-client/src/components/main-view/main-view.jsx",
                lineNumber: 80
            },
            __self: this
        }, "Logout");
        /* If there is no user, the LoginView is rendered ? but that doesn't work ---- hence commented out below*/ // if (!user)
        //   return <LoginView onLoggedIn={(user) => this.onLoggedIn(user)} />;
        if (movies.length === 0) return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
            className: "main-view",
            __source: {
                fileName: "/Users/klauswehner2/Documents/WEB-Design-Dev/CareerFOUNDRY/myFlix-client/src/components/main-view/main-view.jsx",
                lineNumber: 88
            },
            __self: this
        }));
        return(/*#__PURE__*/ _reactDefault.default.createElement(_rowDefault.default, {
            className: "justify-content-md-center",
            __source: {
                fileName: "/Users/klauswehner2/Documents/WEB-Design-Dev/CareerFOUNDRY/myFlix-client/src/components/main-view/main-view.jsx",
                lineNumber: 91
            },
            __self: this
        }, selectedMovie ? /*#__PURE__*/ _reactDefault.default.createElement(_colDefault.default, {
            md: 10,
            __source: {
                fileName: "/Users/klauswehner2/Documents/WEB-Design-Dev/CareerFOUNDRY/myFlix-client/src/components/main-view/main-view.jsx",
                lineNumber: 95
            },
            __self: this
        }, /*#__PURE__*/ _reactDefault.default.createElement(_movieView.MovieView, {
            movie: selectedMovie,
            onBackClick: (newSelectedMovie)=>{
                this.setSelectedMovie(newSelectedMovie);
            },
            __source: {
                fileName: "/Users/klauswehner2/Documents/WEB-Design-Dev/CareerFOUNDRY/myFlix-client/src/components/main-view/main-view.jsx",
                lineNumber: 96
            },
            __self: this
        })) : movies.map((movie)=>/*#__PURE__*/ _reactDefault.default.createElement(_colDefault.default, {
                md: 6,
                __source: {
                    fileName: "/Users/klauswehner2/Documents/WEB-Design-Dev/CareerFOUNDRY/myFlix-client/src/components/main-view/main-view.jsx",
                    lineNumber: 100
                },
                __self: this
            }, /*#__PURE__*/ _reactDefault.default.createElement(_movieCard.MovieCard, {
                key: movie._id,
                movie: movie,
                onMovieClick: (newSelectedMovie)=>{
                    this.setSelectedMovie(newSelectedMovie);
                },
                __source: {
                    fileName: "/Users/klauswehner2/Documents/WEB-Design-Dev/CareerFOUNDRY/myFlix-client/src/components/main-view/main-view.jsx",
                    lineNumber: 101
                },
                __self: this
            }))
        )));
    }
}

  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}